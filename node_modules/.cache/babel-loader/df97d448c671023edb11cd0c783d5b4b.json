{"ast":null,"code":"/*\nC: Create a note\nR: Read (get) a note\nU: Update a note\nD: Delete a note\n*/\n// const notes = [\n// \t{ id: 1, title: 'New note', body: 'Hey!' },\n// \t{ id: 2, title: 'Second note', body: 'Empty' },\n// \t{ id: 3, title: 'Third note', body: 'Something' }\n// ]\nfunction initializeNotes() {\n  // sets localstorage for the first time\n  localStorage.setItem('notes', JSON.stringify([])); // returns an array\n\n  return [];\n}\n\nexport function createNote(title, body) {\n  const notes = getNotes();\n  const note = {\n    id: Date.now(),\n    title,\n    body\n  };\n  notes.unshift(note);\n  console.log('about to save', notes);\n  const jsonNoteARray = JSON.stringify(notes);\n  localStorage.setItem('notes', jsonNo);\n}\nexport function getNote(id) {\n  const notes = getNotes();\n  return notes.find(note => note.id === id);\n}\nexport function getNotes() {\n  const notes = localStorage.getItem('notes');\n\n  if (!notes) {\n    notes = initializeNotes();\n  }\n\n  const parsedNotes = JSON.parse(notes);\n  return parsedNotes;\n}\nexport function updateNote(id, title, body) {\n  const indexToUpdate = notes.findIndex(note => note.id === id);\n  const note = {\n    id,\n    title,\n    body\n  }; // removes old note\n\n  notes.splice(indexToUpdate, 1); // adds new note to start\n\n  notes.splice(0, 0, note);\n  return notes;\n} // updateNote(3, 'hello', 'blabla')\n\nexport function deleteNote(id) {\n  const indexToDelete = notes.findIndex(note => note.id === id);\n  if (indexToDelete >= 0) notes.splice(indexToDelete, 1);\n  return true;\n}","map":{"version":3,"sources":["/Users/linneawennberg/Desktop/ChangemakerEdu/React/CodeAlong/notes1/src/utils/noteHelpers.js"],"names":["initializeNotes","localStorage","setItem","JSON","stringify","createNote","title","body","notes","getNotes","note","id","Date","now","unshift","console","log","jsonNoteARray","jsonNo","getNote","find","getItem","parsedNotes","parse","updateNote","indexToUpdate","findIndex","splice","deleteNote","indexToDelete"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,SAASA,eAAT,GAA2B;AAC1B;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAe,EAAf,CAA9B,EAF0B,CAG1B;;AACA,SAAO,EAAP;AACA;;AAED,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AACvC,QAAMC,KAAK,GAAGC,QAAQ,EAAtB;AACA,QAAMC,IAAI,GAAG;AACZC,IAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADQ;AAEZP,IAAAA,KAFY;AAGZC,IAAAA;AAHY,GAAb;AAKAC,EAAAA,KAAK,CAACM,OAAN,CAAcJ,IAAd;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,KAA7B;AACA,QAAMS,aAAa,GAAGd,IAAI,CAACC,SAAL,CAAeI,KAAf,CAAtB;AACAP,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BgB,MAA9B;AACA;AAED,OAAO,SAASC,OAAT,CAAiBR,EAAjB,EAAqB;AAC3B,QAAMH,KAAK,GAAGC,QAAQ,EAAtB;AACA,SAAOD,KAAK,CAACY,IAAN,CAAYV,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAjC,CAAP;AACA;AAED,OAAO,SAASF,QAAT,GAAoB;AAC1B,QAAMD,KAAK,GAAGP,YAAY,CAACoB,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAI,CAACb,KAAL,EAAY;AACXA,IAAAA,KAAK,GAAGR,eAAe,EAAvB;AACA;;AACD,QAAMsB,WAAW,GAAGnB,IAAI,CAACoB,KAAL,CAAWf,KAAX,CAApB;AACA,SAAOc,WAAP;AACA;AAED,OAAO,SAASE,UAAT,CAAoBb,EAApB,EAAwBL,KAAxB,EAA+BC,IAA/B,EAAqC;AAC3C,QAAMkB,aAAa,GAAGjB,KAAK,CAACkB,SAAN,CAAiBhB,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAtC,CAAtB;AACA,QAAMD,IAAI,GAAG;AACZC,IAAAA,EADY;AAEZL,IAAAA,KAFY;AAGZC,IAAAA;AAHY,GAAb,CAF2C,CAO3C;;AACAC,EAAAA,KAAK,CAACmB,MAAN,CAAaF,aAAb,EAA4B,CAA5B,EAR2C,CAS3C;;AACAjB,EAAAA,KAAK,CAACmB,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmBjB,IAAnB;AACA,SAAOF,KAAP;AACA,C,CAED;;AAEA,OAAO,SAASoB,UAAT,CAAoBjB,EAApB,EAAwB;AAC9B,QAAMkB,aAAa,GAAGrB,KAAK,CAACkB,SAAN,CAAiBhB,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAtC,CAAtB;AACA,MAAIkB,aAAa,IAAI,CAArB,EAAwBrB,KAAK,CAACmB,MAAN,CAAaE,aAAb,EAA4B,CAA5B;AACxB,SAAO,IAAP;AACA","sourcesContent":["/*\nC: Create a note\nR: Read (get) a note\nU: Update a note\nD: Delete a note\n*/\n\n// const notes = [\n// \t{ id: 1, title: 'New note', body: 'Hey!' },\n// \t{ id: 2, title: 'Second note', body: 'Empty' },\n// \t{ id: 3, title: 'Third note', body: 'Something' }\n// ]\n\nfunction initializeNotes() {\n\t// sets localstorage for the first time\n\tlocalStorage.setItem('notes', JSON.stringify([]))\n\t// returns an array\n\treturn []\n}\n\nexport function createNote(title, body) {\n\tconst notes = getNotes()\n\tconst note = {\n\t\tid: Date.now(),\n\t\ttitle,\n\t\tbody\n\t}\n\tnotes.unshift(note)\n\tconsole.log('about to save', notes)\n\tconst jsonNoteARray = JSON.stringify(notes)\n\tlocalStorage.setItem('notes', jsonNo)\n}\n\nexport function getNote(id) {\n\tconst notes = getNotes()\n\treturn notes.find((note) => note.id === id)\n}\n\nexport function getNotes() {\n\tconst notes = localStorage.getItem('notes')\n\tif (!notes) {\n\t\tnotes = initializeNotes()\n\t}\n\tconst parsedNotes = JSON.parse(notes)\n\treturn parsedNotes\n}\n\nexport function updateNote(id, title, body) {\n\tconst indexToUpdate = notes.findIndex((note) => note.id === id)\n\tconst note = {\n\t\tid,\n\t\ttitle,\n\t\tbody\n\t}\n\t// removes old note\n\tnotes.splice(indexToUpdate, 1)\n\t// adds new note to start\n\tnotes.splice(0, 0, note)\n\treturn notes\n}\n\n// updateNote(3, 'hello', 'blabla')\n\nexport function deleteNote(id) {\n\tconst indexToDelete = notes.findIndex((note) => note.id === id)\n\tif (indexToDelete >= 0) notes.splice(indexToDelete, 1)\n\treturn true\n}\n"]},"metadata":{},"sourceType":"module"}