{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/linneawennberg/Desktop/ChangemakerEdu/React/CodeAlong/notes1/src/examples/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport { createNote, getNotes, updateNote, deleteNote } from '../utils/noteHelpers';\n/*\nRequired\n1. (DONE) write text in fields and store it as a new note\n2. (DONE) click on a note and display text in the fields\n3. (DONE) edit the field w/ text from a selected note and save it\n4. (DONE) clicking save while on a selected note will update the selected note\n\t-- how to we make <List /> rerender when clicking Save?\n5. Delete selected note\n*/\n\nconst STATUS_INITIAL_VALUE = '';\nexport default function InputForm({\n  selectedNote,\n  refreshList,\n  setSelectedNote\n}) {\n  _s();\n\n  const [title, setTitle] = useState(STATUS_INITIAL_VALUE);\n  const [status, setStatus] = useState(STATUS_INITIAL_VALUE);\n  const [variant, setVariant] = useState(STATUS_INITIAL_VALUE);\n  useEffect(() => {\n    setTimeout(() => setStatus(STATUS_INITIAL_VALUE), 3000);\n  }, [status]);\n  useEffect(() => {\n    if (selectedNote) return setTitle(selectedNote.title);\n    setTitle(STATUS_INITIAL_VALUE);\n  }, [selectedNote]);\n  useEffect(() => {\n    if (selectedNote) return setVariant('');\n  }, [variant]);\n\n  const onChangeTitle = e => setTitle(e.target.value);\n\n  const onSave = e => {\n    e.preventDefault();\n    setTitle(STATUS_INITIAL_VALUE);\n    setStatus('The note is saved');\n    setVariant('success');\n    setTitle('');\n\n    if (selectedNote) {\n      updateNote(selectedNote.id, title);\n      return refreshList();\n    }\n\n    createNote(title, STATUS_INITIAL_VALUE);\n    refreshList();\n  };\n\n  const onDelete = e => {\n    e.preventDefault();\n    const {\n      id\n    } = selectedNote;\n    deleteNote(id);\n    refreshList();\n    setTitle(STATUS_INITIAL_VALUE);\n    setStatus('The note is deleted');\n    setVariant('danger');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        className: \"mb-4\",\n        size: \"lg\",\n        value: title,\n        onChange: onChangeTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onSave,\n      className: \"mr-2\",\n      variant: \"success\",\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), selectedNote && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onDelete,\n      className: \"mr-2\",\n      variant: \"danger\",\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), status && /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"mt-3\",\n      variant: variant,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n}\n\n_s(InputForm, \"psCLzkJqo2oBTR04AyZufgcJpnc=\");\n\n_c = InputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"sources":["/Users/linneawennberg/Desktop/ChangemakerEdu/React/CodeAlong/notes1/src/examples/Form.js"],"names":["React","useState","useEffect","Form","Button","Alert","createNote","getNotes","updateNote","deleteNote","STATUS_INITIAL_VALUE","InputForm","selectedNote","refreshList","setSelectedNote","title","setTitle","status","setStatus","variant","setVariant","setTimeout","onChangeTitle","e","target","value","onSave","preventDefault","id","onDelete"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,sBAA7D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,oBAAoB,GAAG,EAA7B;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,WAAhB;AAA6BC,EAAAA;AAA7B,CAAnB,EAAmE;AAAA;;AACjF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACS,oBAAD,CAAlC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAACS,oBAAD,CAApC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAACS,oBAAD,CAAtC;AAEAR,EAAAA,SAAS,CACR,MAAM;AACLmB,IAAAA,UAAU,CAAC,MAAMH,SAAS,CAACR,oBAAD,CAAhB,EAAwC,IAAxC,CAAV;AACA,GAHO,EAIR,CAACO,MAAD,CAJQ,CAAT;AAOAf,EAAAA,SAAS,CACR,MAAM;AACL,QAAIU,YAAJ,EAAkB,OAAOI,QAAQ,CAACJ,YAAY,CAACG,KAAd,CAAf;AAClBC,IAAAA,QAAQ,CAACN,oBAAD,CAAR;AACA,GAJO,EAKR,CAACE,YAAD,CALQ,CAAT;AAQAV,EAAAA,SAAS,CACR,MAAM;AACL,QAAIU,YAAJ,EAAkB,OAAOQ,UAAU,CAAC,EAAD,CAAjB;AAClB,GAHO,EAIR,CAACD,OAAD,CAJQ,CAAT;;AAOA,QAAMG,aAAa,GAAIC,CAAD,IAAOP,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAArC;;AAEA,QAAMC,MAAM,GAAIH,CAAD,IAAO;AACrBA,IAAAA,CAAC,CAACI,cAAF;AACAX,IAAAA,QAAQ,CAACN,oBAAD,CAAR;AACAQ,IAAAA,SAAS,CAAC,mBAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,SAAD,CAAV;AACAJ,IAAAA,QAAQ,CAAC,EAAD,CAAR;;AACA,QAAIJ,YAAJ,EAAkB;AACjBJ,MAAAA,UAAU,CAACI,YAAY,CAACgB,EAAd,EAAkBb,KAAlB,CAAV;AACA,aAAOF,WAAW,EAAlB;AACA;;AAEDP,IAAAA,UAAU,CAACS,KAAD,EAAQL,oBAAR,CAAV;AACAG,IAAAA,WAAW;AACX,GAbD;;AAeA,QAAMgB,QAAQ,GAAIN,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACI,cAAF;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAShB,YAAf;AACAH,IAAAA,UAAU,CAACmB,EAAD,CAAV;AACAf,IAAAA,WAAW;AACXG,IAAAA,QAAQ,CAACN,oBAAD,CAAR;AACAQ,IAAAA,SAAS,CAAC,qBAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,QAAD,CAAV;AACA,GARD;;AAUA,sBACC,QAAC,IAAD;AAAA,4BACC,QAAC,IAAD,CAAM,KAAN;AAAA,8BACC,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,IAAD,CAAM,OAAN;AAAc,QAAA,SAAS,EAAC,MAAxB;AAA+B,QAAA,IAAI,EAAC,IAApC;AAAyC,QAAA,KAAK,EAAEL,KAAhD;AAAuD,QAAA,QAAQ,EAAEO;AAAjE;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAKC,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEI,MAAjB;AAAyB,MAAA,SAAS,EAAC,MAAnC;AAA0C,MAAA,OAAO,EAAC,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALD,EAQEd,YAAY,iBACZ,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEiB,QAAjB;AAA2B,MAAA,SAAS,EAAC,MAArC;AAA4C,MAAA,OAAO,EAAC,QAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,EAaEZ,MAAM,iBACN,QAAC,KAAD;AAAO,MAAA,SAAS,EAAC,MAAjB;AAAwB,MAAA,OAAO,EAAEE,OAAjC;AAAA,gBACEF;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAqBA;;GA3EuBN,S;;KAAAA,S","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport { createNote, getNotes, updateNote, deleteNote } from '../utils/noteHelpers'\n\n/*\nRequired\n1. (DONE) write text in fields and store it as a new note\n2. (DONE) click on a note and display text in the fields\n3. (DONE) edit the field w/ text from a selected note and save it\n4. (DONE) clicking save while on a selected note will update the selected note\n\t-- how to we make <List /> rerender when clicking Save?\n5. Delete selected note\n*/\n\nconst STATUS_INITIAL_VALUE = ''\n\nexport default function InputForm({ selectedNote, refreshList, setSelectedNote }) {\n\tconst [title, setTitle] = useState(STATUS_INITIAL_VALUE)\n\tconst [status, setStatus] = useState(STATUS_INITIAL_VALUE)\n\tconst [variant, setVariant] = useState(STATUS_INITIAL_VALUE)\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsetTimeout(() => setStatus(STATUS_INITIAL_VALUE), 3000)\n\t\t},\n\t\t[status]\n\t)\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (selectedNote) return setTitle(selectedNote.title)\n\t\t\tsetTitle(STATUS_INITIAL_VALUE)\n\t\t},\n\t\t[selectedNote]\n\t)\n\n\tuseEffect(\n\t\t() => {\n\t\t\tif (selectedNote) return setVariant('')\n\t\t},\n\t\t[variant]\n\t)\n\n\tconst onChangeTitle = (e) => setTitle(e.target.value)\n\n\tconst onSave = (e) => {\n\t\te.preventDefault()\n\t\tsetTitle(STATUS_INITIAL_VALUE)\n\t\tsetStatus('The note is saved')\n\t\tsetVariant('success')\n\t\tsetTitle('')\n\t\tif (selectedNote) {\n\t\t\tupdateNote(selectedNote.id, title)\n\t\t\treturn refreshList()\n\t\t}\n\n\t\tcreateNote(title, STATUS_INITIAL_VALUE)\n\t\trefreshList()\n\t}\n\n\tconst onDelete = (e) => {\n\t\te.preventDefault()\n\t\tconst { id } = selectedNote\n\t\tdeleteNote(id)\n\t\trefreshList()\n\t\tsetTitle(STATUS_INITIAL_VALUE)\n\t\tsetStatus('The note is deleted')\n\t\tsetVariant('danger')\n\t}\n\n\treturn (\n\t\t<Form>\n\t\t\t<Form.Group>\n\t\t\t\t<Form.Label>Title</Form.Label>\n\t\t\t\t<Form.Control className=\"mb-4\" size=\"lg\" value={title} onChange={onChangeTitle} />\n\t\t\t</Form.Group>\n\t\t\t<Button onClick={onSave} className=\"mr-2\" variant=\"success\">\n\t\t\t\tSave\n\t\t\t</Button>\n\t\t\t{selectedNote && (\n\t\t\t\t<Button onClick={onDelete} className=\"mr-2\" variant=\"danger\">\n\t\t\t\t\tDelete\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t\t{status && (\n\t\t\t\t<Alert className=\"mt-3\" variant={variant}>\n\t\t\t\t\t{status}\n\t\t\t\t</Alert>\n\t\t\t)}\n\t\t</Form>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}